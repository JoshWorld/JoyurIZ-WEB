{"version":3,"sources":["userTrain.js","infoModal.js","App.js","serviceWorker.js","index.js"],"names":["ReactGA","initialize","pageview","window","location","pathname","search","customStyles","content","top","left","right","bottom","marginRight","width","transform","padding","overlay","backgroundColor","AnimatedModal","props","React","useState","incorrectModalOpen","incorrectModalSet","click","name","a","imagePost","clear","banner","bannerStatus","who","event","category","action","axios","post","hash","console","log","className","Button","variant","color","onClick","e","closeTimeoutMS","isOpen","onRequestClose","style","contentLabel","id","IconButton","size","Modal","setAppElement","modalIsOpen","setIsOpen","closeModal","shouldCloseOnOverlayClick","shouldCloseOnEsc","textAlign","href","override","css","App","state","error","fail","predict","loading","showResult","reload","onDrop","bind","showBanner","paste","addEventListener","this","items","clipboardData","originalEvent","JSON","stringify","blob","i","length","type","indexOf","getAsFile","setState","status","setTimeout","pictureFiles","reader","FileReader","onload","document","getElementById","src","result","readAsDataURL","canvas","formData","FormData","append","ctx","getContext","clearRect","height","response","img","data","lineWidth","strokeStyle","rect","drawImage","stroke","text","title","fontSize","multiple","acceptedFiles","getRootProps","getInputProps","accept","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c1ce88e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Modal from 'react-modal';\r\nimport './upload.css';\r\nimport axios from 'axios'; \r\nimport ReactGA from 'react-ga';\r\nconst trackingId = 'UA-148371899-1'\r\nReactGA.initialize(trackingId);\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      width: '270px',\r\n      transform             : 'translate(-50%, -50%)',\r\n      padding               : '30px'\r\n    },\r\n    overlay : {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n    }\r\n};\r\nModal.setAppElement('#root')\r\nexport default function AnimatedModal(props) {\r\n    const [incorrectModalOpen,incorrectModalSet] = React.useState(false);\r\n    async function click(name){\r\n        await imagePost(name)\r\n        incorrectModalSet(false);\r\n        props.clear()\r\n        props.banner({bannerStatus:true})\r\n    }\r\n    async function imagePost(who){\r\n        ReactGA.event({category: 'userTrain', action: 'updateDB'});\r\n\r\n        try{\r\n//                return await axios.post(\"https://joyuriz.shop/userTrain\", {\r\n            return await axios.post(\"https://193.122.104.99.sslip.io:1029/feedback\", {\r\n            //return await axios.post(\"http://193.123.250.156:8080/api/v1/feedback\", {\r\n\r\n                'feedback':      who,\r\n                'hash':           props.hash\r\n            })\r\n        } catch(error){\r\n            console.log(error)\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className=\"userTrain\">\r\n            <Button className=\"wrong\" variant=\"contained\" color=\"secondary\" onClick={e=>incorrectModalSet(true)}>\r\n                틀렸어요 ㅜ.ㅜ\r\n            </Button>\r\n            <Modal\r\n                closeTimeoutMS={500}\r\n                isOpen={incorrectModalOpen}\r\n                onRequestClose={e=>incorrectModalSet(false)}\r\n                style={customStyles}\r\n                contentLabel=\"Example Modal\">\r\n                <div id=\"exitButton\">\r\n                    <IconButton id=\"exitIcon\" size=\"small\" onClick={e=>incorrectModalSet(false)}>\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className=\"member\">\r\n                    <h2>정답을 알려주세요</h2>\r\n                    <p>\r\n                        지금 입력하신 답변은 추후에 반영됩니다.\r\n                    </p>\r\n                    <div>\r\n                    <Button id=\"chaewon\" variant=\"contained\" onClick={e=>click('Chaewon')}>김채원</Button>\r\n                    <Button id=\"yuri\" variant=\"contained\" onClick={e=>click('Yuri')}>조유리</Button>\r\n                    <Button id=\"yaena\" variant=\"contained\" onClick={e=>click('Yaena')}>최예나</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from 'react-modal';\r\nimport './upload.css';\r\nimport ReactGA from 'react-ga';\r\nconst trackingId = 'UA-148371899-1'\r\nReactGA.initialize(trackingId);\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)',\r\n      padding               : '20px'\r\n    },\r\n    overlay : {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n    }\r\n};\r\nModal.setAppElement('#root')\r\nexport default function AnimatedModal(props) {\r\n    const [modalIsOpen,setIsOpen] = React.useState(true);\r\n    function closeModal(){\r\n      setIsOpen(false);\r\n      ReactGA.event({category: 'infoModal', action: 'closeModal'});\r\n    }\r\n    return (\r\n        <div className=\"initModal\">\r\n            <Modal\r\n                closeTimeoutMS={500}\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n                contentLabel=\"Example Modal\"\r\n                shouldCloseOnOverlayClick={false}\r\n                shouldCloseOnEsc={false}\r\n                >\r\n                <div>\r\n                    <div style={{textAlign:'center'}}><h1><span>조유리즈 판별기</span></h1></div>\r\n                    <ul>\r\n                        <li><div>본 서비스는 '김채원', '조유리', '최예나' 중 <strong>가장 닮은</strong> 사람을 알려주는 웹 페이지 입니다.</div></li>\r\n                        <li><div>업로드한 모든 사진은 <strong>딥러닝 모델을 학습</strong> 하는데 사용될 수 있습니다.</div></li>\r\n                        <li><div>첨부파일의 최대 용량은 <strong>10MB</strong>로 제한되어 있습니다.</div></li>\r\n                        <li><div>파일 확장자는 <strong>jpg, png, gif</strong>만 가능하며, <strong>gif</strong>파일은 첫번째 프레임을 분석에 사용합니다.</div></li>\r\n                        <li><div><strong>얼굴이 1개</strong>인 사진만 분석을 시도합니다.</div></li>\r\n                        <li><div>기타 문의사항은 <a href=\"mailto:inerplat@gmail.com\">inerplat@gmail.com</a>으로 문의 바랍니다.</div></li>\r\n                    </ul>\r\n                </div>\r\n                <Button style={{width:'100%'}} id=\"chaewon\" variant=\"contained\" onClick={e=>closeModal()}>시작하기</Button>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import axios from 'axios'; \r\nimport React,{Component} from 'react';\r\nimport { css } from \"@emotion/core\";\r\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\r\nimport './upload.css';\r\nimport AnimatedModal from \"./userTrain\";\r\nimport InfoModal from \"./infoModal\";\r\nimport Dropzone from 'react-dropzone'\r\nimport Banner from 'react-js-banner';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport {IconButton} from '@material-ui/core';\r\nimport ReactGA from 'react-ga';\r\nconst trackingId = 'UA-148371899-1'\r\nReactGA.initialize(trackingId);\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n    this.state = {\r\n      error:          false,\r\n      fail:           false,\r\n      predict:    [],\r\n      loading:        false,\r\n      hash:           '',\r\n      showResult:     false,\r\n      bannerStatus:   false,\r\n      reload:         false\r\n    };\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.showBanner = this.showBanner.bind(this);\r\n    this.paste = this.paste.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener(\"paste\", this.paste);\r\n  }\r\n  paste(event){\r\n    this.clear()\r\n    var items = (event.clipboardData || event.originalEvent.clipboardData).items;\r\n    console.log(JSON.stringify(items));\r\n    var blob = null;\r\n    for (var i = 0; i < items.length; i++) {\r\n      if (items[i].type.indexOf(\"image\") === 0) {\r\n        blob = items[i].getAsFile();\r\n      }\r\n    }\r\n    if (blob !== null) {\r\n      console.log(blob)\r\n      this.onDrop([blob])\r\n    }\r\n  }\r\n  clear(){\r\n    this.setState({\r\n      error:          false,\r\n      fail:           false,\r\n      predict:    [],\r\n      loading:        false,\r\n      hash:           '',\r\n      showResult:     false,\r\n      bannerStatus:   false,\r\n      reload:         true\r\n    })\r\n    ReactGA.event({category: 'clear', action: 'reset'});\r\n  }\r\n  showBanner(status){\r\n    this.setState(status)\r\n    setTimeout(\r\n      function() {\r\n          this.setState({bannerStatus:  false, error: false, fail: false});\r\n      }\r\n      .bind(this),\r\n      3000\r\n    )\r\n  }\r\n  async onDrop(event) {\r\n    console.log(event)\r\n    ReactGA.event({category: 'onDrop', action: 'upload'});\r\n    this.setState({\r\n      predict:    [],\r\n      loading:        true,\r\n      hash:           '',\r\n      showResult:     false\r\n    })\r\n    var pictureFiles = event\r\n    var reader = new FileReader();\r\n    reader.onload = function(){\r\n      var output = document.getElementById('preview');\r\n      output.src = reader.result;\r\n    };\r\n    reader.readAsDataURL(pictureFiles[0]);\r\n    var canvas = document.getElementById(\"imageCanvas\");\r\n\r\n\r\n    if(pictureFiles.length > 0){\r\n      const formData = new FormData();\r\n      formData.append( \r\n        \"image\", \r\n        pictureFiles[0],\r\n        pictureFiles[0].name\r\n      );\r\n      var imagePost = async () =>{\r\n        ReactGA.event({category: 'onDrop', action: 'requestServer'});\r\n        try{\r\n          return await axios.post(\"https://193.122.104.99.sslip.io:1029/api/v1/upload/image\", formData)\r\n        } catch(error){\r\n          console.log(error)\r\n        }\r\n      }\r\n      var ctx = canvas.getContext(\"2d\"); \r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      var response = await imagePost()\r\n      if(!response){\r\n        ReactGA.event({category: 'onDrop', action: 'noResponse'});\r\n        this.showBanner({error : true})\r\n      }\r\n      else{\r\n        var img = document.getElementById(\"preview\");\r\n        canvas.width  = img.width;\r\n        canvas.height = img.height;\r\n        \r\n        if(response.status === 200 && response.data.predict != \"fail\"){\r\n          ReactGA.event({category: 'onDrop', action: 'success'});\r\n          ctx.lineWidth = \"5\";\r\n          ctx.strokeStyle = \"lightgreen\";\r\n          var {top , bottom, left, right} = response.data\r\n          ctx.rect(left, top, (right-left), (bottom-top));\r\n          ctx.drawImage(img, 0, 0, img.width, img.height);\r\n          ctx.stroke();\r\n              \r\n          this.setState({\r\n            predict: [((text)=>{\r\n              return ({'Yuri': '조유리', 'Yaena': '최예나', 'Chaewon': '김채원'})[text]\r\n            })(response.data.predict)\r\n          ],\r\n            loading :     false,\r\n            hash:         response.data.hash,\r\n            showResult:   true\r\n          })\r\n        }\r\n        else{\r\n          ctx.drawImage(img, 0, 0, img.width, img.height);\r\n          this.setState({\r\n            predict: [\"fail to find\"],\r\n            loading : false,\r\n            hash:     response.data.hash\r\n          })\r\n          this.showBanner({fail : true})\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"back\">\r\n        <Banner \r\n          className=\"banner\"\r\n          title=\"응답이 제출되었습니다.\"\r\n          showBanner={this.state.bannerStatus}\r\n        />\r\n        <Banner \r\n          css={{backgroundColor:'red', color:'white'}}\r\n          className=\"banner\"\r\n          title=\"잘못된 파일이거나, 서버가 응답할 수 없습니다.\"\r\n          showBanner={this.state.error}\r\n        />\r\n        <Banner \r\n          css={{backgroundColor:'yellow'}}\r\n          className=\"banner\"\r\n          title=\"얼굴을 찾을 수 없습니다.\"\r\n          showBanner={this.state.fail}\r\n        />\r\n      <div className=\"bodyDiv\">\r\n        <InfoModal></InfoModal>\r\n        <img className=\"preview\" id=\"preview\" />\r\n        <div className=\"upload\">\r\n            <IconButton className=\"iconButton\" onClick={this.clear} size=\"small\">\r\n              <RefreshIcon className=\"refresh\" fontSize=\"large\"/>\r\n            </IconButton>\r\n            <div className=\"upload-files\">\r\n              <header>\r\n              <p>\r\n              <span className=\"up\">조유리즈</span>\r\n              <span className=\"load\">판별기</span>\r\n              </p>\r\n              </header>\r\n            <div className=\"body\" id=\"drop\">         \r\n              {\r\n                !this.state.loading && !this.state.showResult ?(\r\n                  <div className=\"uploadBox\">\r\n                    <Dropzone multiple={false} onDrop={acceptedFiles => this.onDrop(acceptedFiles)}>\r\n                      {({getRootProps, getInputProps}) => (\r\n                        <section className=\"dropSection\">\r\n                          <div className=\"dropBox\" {...getRootProps(this.style)}>\r\n                            <input className=\"dropzone\" {...getInputProps({\r\n                              type:'file',\r\n                              accept:'image/*'\r\n                            })} />\r\n                            <div className=\"dropText\">\r\n                              <p className={this.state.reload ? 'nomalP' : 'fadeP'}>업로드할 파일을 드래그하거나</p> \r\n                              <p className={this.state.reload ? 'nomalP' : 'fadeP'}>박스를 <span style={{color:'lightBlue'}}> 클릭</span>해주세요</p>\r\n                              <br/>\r\n                              <p className={this.state.reload ? 'nomalP' : 'fadeP'}><span style={{color:'lightBlue'}}>Ctrl+V</span>로 클립보드에 있는 이미지를</p>\r\n                              <p className={this.state.reload ? 'nomalP' : 'fadeP'}>붙여 넣을 수 있습니다.</p> \r\n                            </div>\r\n                          </div>\r\n                        </section>\r\n                      )}\r\n                    </Dropzone>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"imageBox\">\r\n                    <div className=\"imageTable\">\r\n                    <canvas className=\"imageCanvas\" id=\"imageCanvas\">이 브라우저는 'canvas'기능을 제공하지 않습니다.</canvas>\r\n                    {\r\n                      this.state.showResult ?(\r\n                      <div className=\"resultBox\">\r\n                        <div className=\"resultDiv\">분석 결과 : {this.state.predict[0]}</div>\r\n                        <div className=\"resultDiv\">\r\n                          <AnimatedModal \r\n                            banner={this.showBanner}\r\n                            clear={this.clear}\r\n                            hash={this.state.hash} />\r\n                            \r\n                        </div>\r\n                      </div>\r\n                      ) :null\r\n                    }\r\n                    <div className=\"loadingBox\">\r\n                        <PropagateLoader\r\n                          css={override}\r\n                          size={25}\r\n                          color={\"#FF509F\"}\r\n                          loading={this.state.loading}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  )\r\n              }\r\n            </div>\r\n            </div>\r\n        </div>  \r\n\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default App; \r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}