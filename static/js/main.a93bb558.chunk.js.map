{"version":3,"sources":["userTrain.js","App.js","serviceWorker.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","width","transform","padding","overlay","backgroundColor","AnimatedModal","props","React","useState","incorrectModalOpen","incorrectModalSet","click","name","a","imagePost","clear","banner","who","fileName","axios","post","hash","console","log","className","Button","variant","color","onClick","e","closeTimeoutMS","isOpen","onRequestClose","style","contentLabel","id","IconButton","size","Modal","setAppElement","override","css","App","state","error","fail","predictions","loading","vote","showResult","bannerStatus","reload","onDrop","bind","showBanner","this","setState","status","setTimeout","event","pictureFiles","reader","FileReader","onload","document","getElementById","src","result","readAsDataURL","canvas","ctx","getContext","clearRect","height","length","formData","FormData","append","response","img","scale","Math","max","x","y","data","success","lineWidth","strokeStyle","rect","drawImage","stroke","text","path","voteChaewon","voteYuri","voteYena","title","fontSize","prediction","multiple","acceptedFiles","getRootProps","getInputProps","type","accept","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4UAMMA,EAAe,CACjBC,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,OACxBC,OAAwB,OACxBC,YAAwB,OACxBC,MAAO,QACPC,UAAwB,wBACxBC,QAAwB,QAE1BC,QAAU,CACNC,gBAAiB,uBAIV,SAASC,EAAcC,GAAQ,IAAD,EACMC,IAAMC,UAAS,GADrB,mBAClCC,EADkC,KACfC,EADe,cAE1BC,EAF0B,8EAEzC,WAAqBC,GAArB,SAAAC,EAAA,sEACUC,EAAUF,GADpB,OAEIF,GAAkB,GAClBJ,EAAMS,QACNT,EAAMU,SAJV,4CAFyC,+BAQ1BF,EAR0B,8EAQzC,WAAyBG,GAAzB,SAAAJ,EAAA,yDACyB,KAAlBP,EAAMY,SADb,0CAGyBC,IAAMC,KAAK,kCAAmC,CACvD,SAAkBd,EAAMY,SACxB,UAAkBD,EAClB,KAAkBX,EAAMe,OANxC,wEASQC,QAAQC,IAAR,MATR,gCAaQD,QAAQC,IAAI,kFAbpB,0DARyC,sBAwBzC,OACI,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAQD,UAAU,QAAQE,QAAQ,YAAYC,MAAM,YAAYC,QAAS,SAAAC,GAAC,OAAEnB,GAAkB,KAA9F,0CAGA,kBAAC,IAAD,CACIoB,eAAgB,IAChBC,OAAQtB,EACRuB,eAAgB,SAAAH,GAAC,OAAEnB,GAAkB,IACrCuB,MAAOxC,EACPyC,aAAa,iBACb,yBAAKC,GAAG,cACJ,kBAACC,EAAA,EAAD,CAAYD,GAAG,WAAWE,KAAK,QAAQT,QAAS,SAAAC,GAAC,OAAEnB,GAAkB,KACjE,kBAAC,IAAD,QAGR,yBAAKc,UAAU,UACX,iFACA,0IAGA,6BACA,kBAACC,EAAA,EAAD,CAAQU,GAAG,UAAUT,QAAQ,YAAYE,QAAS,SAAAC,GAAC,OAAElB,EAAM,aAA3D,sBACA,kBAACc,EAAA,EAAD,CAAQU,GAAG,OAAOT,QAAQ,YAAYE,QAAS,SAAAC,GAAC,OAAElB,EAAM,UAAxD,sBACA,kBAACc,EAAA,EAAD,CAAQU,GAAG,OAAOT,QAAQ,YAAYE,QAAS,SAAAC,GAAC,OAAElB,EAAM,UAAxD,0BAjDpB2B,IAAMC,cAAc,S,iLCXpB,IAAMC,EAAWC,cAAH,KA+NCC,E,kDAzNX,WAAYpC,GAAQ,IAAD,8BACnB,cAAMA,IACDqC,MAAQ,CACXC,OAAgB,EAChBC,MAAgB,EAChBC,YAAgB,GAChBC,SAAgB,EAChB7B,SAAgB,GAChBG,KAAgB,GAChB2B,KAAgB,GAChBC,YAAgB,EAChBC,cAAgB,EAChBC,QAAgB,GAElB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKtC,MAAQ,EAAKA,MAAMsC,KAAX,gBACb,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAhBC,E,oDAmBnBE,KAAKC,SAAS,CACZZ,OAAgB,EAChBC,MAAgB,EAChBC,YAAgB,GAChBC,SAAgB,EAChB7B,SAAgB,GAChBG,KAAgB,GAChB2B,KAAgB,GAChBC,YAAgB,EAChBC,cAAgB,EAChBC,QAAgB,M,iCAGTM,GACTF,KAAKC,SAASC,GACdC,WACE,WACIH,KAAKC,SAAS,CAACN,cAAe,EAAON,OAAO,EAAOC,MAAM,KAE5DQ,KAAKE,MACN,O,sEAGSI,G,wGACXJ,KAAKC,SAAS,CACZV,YAAgB,GAChBC,SAAgB,EAChB7B,SAAgB,GAChBG,KAAgB,GAChB2B,KAAgB,GAChBC,YAAgB,IAEdW,EAAeD,GACfE,EAAS,IAAIC,YACVC,OAAS,WACDC,SAASC,eAAe,WAC9BC,IAAML,EAAOM,QAEtBN,EAAOO,cAAcR,EAAa,IAC9BS,EAASL,SAASC,eAAe,gBAEjCK,EAAMD,EAAOE,WAAW,OACxBC,UAAU,EAAG,EAAGH,EAAOrE,MAAOqE,EAAOI,UACtCb,EAAac,OAAS,G,wBACjBC,EAAW,IAAIC,UACZC,OACP,QACAjB,EAAa,GACbA,EAAa,GAAGhD,MAEdE,E,uCAAY,sBAAAD,EAAA,+EAECM,IAAMC,KAAK,sCAAuCuD,GAFnD,wEAIZrD,QAAQC,IAAR,MAJY,wD,+DAOKT,I,SAAjBgE,E,SAKAC,EAAMf,SAASC,eAAe,WAClCI,EAAOrE,MAAS+E,EAAI/E,MACpBqE,EAAOI,OAASM,EAAIN,OAChBO,EAAQC,KAAKC,IAAIb,EAAOrE,MAAQ+E,EAAI/E,MAAOqE,EAAOI,OAASM,EAAIN,QAC/DU,EAAKd,EAAOrE,MAAQ,EAAM+E,EAAI/E,MAAQ,EAAKgF,EAC3CI,EAAKf,EAAOI,OAAS,EAAMM,EAAIN,OAAS,EAAKO,GACpB,IAA1BF,EAASO,KAAKC,SACfhB,EAAIiB,UAAY,IAChBjB,EAAIkB,YAAc,aAFc,EAGEV,EAASO,KAAtC1F,EAH2B,EAG3BA,IAAMG,EAHqB,EAGrBA,OAAQF,EAHa,EAGbA,KAAMC,EAHO,EAGPA,MACzByE,EAAImB,KAAK7F,EAAKoF,EAAOrF,EAAIqF,GAAQnF,EAAMD,GAAMoF,GAAQlF,EAAOH,GAAKqF,GACjEV,EAAIoB,UAAUX,EAAKI,EAAGC,EAAGL,EAAI/E,MAAQgF,EAAOD,EAAIN,OAASO,GACzDV,EAAIqB,SAEJpC,KAAKC,SAAS,CACZV,YAAa,EAAG8C,EAEbd,EAASO,KAAKvC,YADP,CAAC,KAAQ,qBAAO,KAAQ,qBAAO,QAAW,sBAAQ8C,KAG5D7C,SAAc,EACd7B,SAAc4D,EAASO,KAAKQ,KAC5BxE,KAAcyD,EAASO,KAAKhE,KAC5B2B,KAAc,CAAC8B,EAASO,KAAKS,YAAahB,EAASO,KAAKU,SAAUjB,EAASO,KAAKW,UAChF/C,YAAc,MAIhBqB,EAAIoB,UAAUX,EAAKI,EAAGC,EAAGL,EAAI/E,MAAQgF,EAAOD,EAAIN,OAASO,GACzDzB,KAAKC,SAAS,CACZV,YAAa,CAAC,gBACdC,SAAU,EACV7B,SAAU4D,EAASO,KAAKQ,KACxBxE,KAAUyD,EAASO,KAAKhE,OAE1BkC,KAAKD,WAAW,CAACT,MAAO,MArCxBU,KAAKD,WAAW,CAACV,OAAQ,I,kCAkBR,IAACgD,I,kGAyBd,IAAD,OACP,OACE,yBAAKpE,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,SACVyE,MAAM,iEACN3C,WAAYC,KAAKZ,MAAMO,eAEzB,kBAAC,IAAD,CACET,IAAK,CAACrC,gBAAgB,MAAOuB,MAAM,SACnCH,UAAU,SACVyE,MAAM,4HACN3C,WAAYC,KAAKZ,MAAMC,QAEzB,kBAAC,IAAD,CACEH,IAAK,CAACrC,gBAAgB,UACtBoB,UAAU,SACVyE,MAAM,mEACN3C,WAAYC,KAAKZ,MAAME,OAE3B,yBAAKrB,UAAU,WACb,yBAAKA,UAAU,UAAUW,GAAG,YAC5B,yBAAKX,UAAU,UACX,kBAACY,EAAA,EAAD,CAAYZ,UAAU,aAAaI,QAAS2B,KAAKxC,MAAOsB,KAAK,SAC3D,kBAAC,IAAD,CAAab,UAAU,UAAU0E,SAAS,WAE5C,yBAAK1E,UAAU,gBACb,gCACA,2BACA,0BAAMA,UAAU,MAAhB,4BACA,0BAAMA,UAAU,QAAhB,wBAGF,yBAAKA,UAAU,OAAOW,GAAG,QAEpBoB,KAAKZ,MAAMI,SAAYQ,KAAKZ,MAAMM,WAqBjC,yBAAKzB,UAAU,YACb,yBAAKA,UAAU,cACf,4BAAQA,UAAU,cAAcW,GAAG,eAAnC,uHAEEoB,KAAKZ,MAAMM,WACX,yBAAKzB,UAAU,aACb,yBAAKA,UAAU,aAAf,+BAAoC+B,KAAKZ,MAAMG,YAAY,IAC3D,yBAAKtB,UAAU,aACb,kBAACnB,EAAD,CACEW,OAAQuC,KAAKD,WACbvC,MAAOwC,KAAKxC,MACZG,SAAUqC,KAAKZ,MAAMzB,SACrBG,KAAMkC,KAAKZ,MAAMtB,KACjB8E,WAAY5C,KAAKZ,MAAMG,YAAY,OAGtC,KAEL,yBAAKtB,UAAU,cACX,kBAAC,IAAD,CACEiB,IAAKD,EACLH,KAAM,GACNV,MAAO,UACPoB,QAASQ,KAAKZ,MAAMI,aA3C5B,yBAAKvB,UAAU,aACb,kBAAC,IAAD,CAAU4E,UAAU,EAAOhD,OAAQ,SAAAiD,GAAa,OAAI,EAAKjD,OAAOiD,MAC7D,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACC,6BAAS/E,UAAU,eACjB,uCAAKA,UAAU,WAAc8E,EAAa,EAAKrE,QAC7C,yCAAOT,UAAU,YAAe+E,EAAc,CAC5CC,KAAK,OACLC,OAAO,cAET,yBAAKjF,UAAU,YACf,uBAAGA,UAAW,EAAKmB,MAAMQ,OAAS,SAAW,SAA7C,oFACA,uBAAG3B,UAAW,EAAKmB,MAAMQ,OAAS,SAAW,SAA7C,qBACA,0BAAMlB,MAAO,CAACN,MAAM,cAApB,iBADA,4C,GAzKV+E,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASC,eAAe,SDyHpB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7E,GACLtB,QAAQsB,MAAMA,EAAM8E,a","file":"static/js/main.a93bb558.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Modal from 'react-modal';\r\nimport './upload.css';\r\nimport axios from 'axios'; \r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      width: '270px',\r\n      transform             : 'translate(-50%, -50%)',\r\n      padding               : '30px'\r\n    },\r\n    overlay : {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\r\n    }\r\n};\r\nModal.setAppElement('#root')\r\nexport default function AnimatedModal(props) {\r\n    const [incorrectModalOpen,incorrectModalSet] = React.useState(false);\r\n    async function click(name){\r\n        await imagePost(name)\r\n        incorrectModalSet(false);\r\n        props.clear()\r\n        props.banner()\r\n    }\r\n    async function imagePost(who){\r\n        if(props.fileName !==''){\r\n            try{\r\n                return await axios.post(\"http://localhost:8080/userTrain\", {\r\n                    'fileName':       props.fileName,\r\n                    'userTrain':      who,\r\n                    'hash':           props.hash\r\n                })\r\n            } catch(error){\r\n            console.log(error)\r\n            }\r\n        }\r\n        else{\r\n            console.log('당신은,,정말,,나쁜,,사람이예요')\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"userTrain\">\r\n            <Button className=\"wrong\" variant=\"contained\" color=\"secondary\" onClick={e=>incorrectModalSet(true)}>\r\n                틀렸어요 ㅜ.ㅜ\r\n            </Button>\r\n            <Modal\r\n                closeTimeoutMS={500}\r\n                isOpen={incorrectModalOpen}\r\n                onRequestClose={e=>incorrectModalSet(false)}\r\n                style={customStyles}\r\n                contentLabel=\"Example Modal\">\r\n                <div id=\"exitButton\">\r\n                    <IconButton id=\"exitIcon\" size=\"small\" onClick={e=>incorrectModalSet(false)}>\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className=\"member\">\r\n                    <h2>정답을 알려주세요</h2>\r\n                    <p>\r\n                        지금 입력하신 답변은 추후에 반영됩니다.\r\n                    </p>\r\n                    <div>\r\n                    <Button id=\"chaewon\" variant=\"contained\" onClick={e=>click('Chaewon')}>김채원</Button>\r\n                    <Button id=\"yuri\" variant=\"contained\" onClick={e=>click('Yuri')}>조유리</Button>\r\n                    <Button id=\"yena\" variant=\"contained\" onClick={e=>click('Yena')}>최예나</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import axios from 'axios'; \r\nimport React,{Component} from 'react';\r\nimport { css } from \"@emotion/core\";\r\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\r\nimport './upload.css';\r\nimport AnimatedModal from \"./userTrain\";\r\nimport Dropzone from 'react-dropzone'\r\nimport Banner from 'react-js-banner';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport {IconButton} from '@material-ui/core';\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\nclass App extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      error:          false,\r\n      fail:           false,\r\n      predictions:    [],\r\n      loading:        false,\r\n      fileName:       '',\r\n      hash:           '',\r\n      vote:           [],\r\n      showResult:     false,\r\n      bannerStatus:   false,\r\n      reload:         false\r\n    };\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.showBanner = this.showBanner.bind(this);\r\n  }\r\n  clear(){\r\n    this.setState({\r\n      error:          false,\r\n      fail:           false,\r\n      predictions:    [],\r\n      loading:        false,\r\n      fileName:       '',\r\n      hash:           '',\r\n      vote:           [],\r\n      showResult:     false,\r\n      bannerStatus:   false,\r\n      reload:         true\r\n    })\r\n  }\r\n  showBanner(status){\r\n    this.setState(status)\r\n    setTimeout(\r\n      function() {\r\n          this.setState({bannerStatus:  false, error: false, fail: false});\r\n      }\r\n      .bind(this),\r\n      3000\r\n    )\r\n  }\r\n  async onDrop(event) {\r\n    this.setState({\r\n      predictions:    [],\r\n      loading:        true,\r\n      fileName:       '',\r\n      hash:           '',\r\n      vote:           [],\r\n      showResult:     false\r\n    })\r\n    var pictureFiles = event\r\n    var reader = new FileReader();\r\n    reader.onload = function(){\r\n      var output = document.getElementById('preview');\r\n      output.src = reader.result;\r\n    };\r\n    reader.readAsDataURL(pictureFiles[0]);\r\n    var canvas = document.getElementById(\"imageCanvas\");\r\n\r\n    var ctx = canvas.getContext(\"2d\"); \r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    if(pictureFiles.length > 0){\r\n      const formData = new FormData();\r\n      formData.append( \r\n        \"image\", \r\n        pictureFiles[0],\r\n        pictureFiles[0].name\r\n      );\r\n      var imagePost = async () =>{\r\n        try{\r\n          return await axios.post(\"http://192.168.0.2:8080/imageUpload\", formData)\r\n        } catch(error){\r\n          console.log(error)\r\n        }\r\n      }\r\n      var response = await imagePost()\r\n      if(!response){\r\n        this.showBanner({error : true})\r\n      }\r\n      else{\r\n      var img = document.getElementById(\"preview\");\r\n      canvas.width  = img.width;\r\n      canvas.height = img.height;\r\n      var scale = Math.max(canvas.width / img.width, canvas.height / img.height);\r\n      var x = (canvas.width / 2) - (img.width / 2) * scale;\r\n      var y = (canvas.height / 2) - (img.height / 2) * scale;\r\n      if(response.data.success === true){\r\n        ctx.lineWidth = \"5\";\r\n        ctx.strokeStyle = \"lightgreen\";\r\n        var {top , bottom, left, right} = response.data\r\n        ctx.rect(left*scale, top*scale, (right-left)*scale, (bottom-top)*scale);\r\n        ctx.drawImage(img, x, y, img.width * scale, img.height * scale);\r\n        ctx.stroke();\r\n            \r\n        this.setState({\r\n          predictions: [((text)=>{\r\n            return ({'Yuri': '조유리', 'Yena': '최예나', 'Chaewon': '김채원'})[text]\r\n          })(response.data.predictions)\r\n        ],\r\n          loading :     false,\r\n          fileName:     response.data.path,\r\n          hash:         response.data.hash,\r\n          vote:         [response.data.voteChaewon, response.data.voteYuri, response.data.voteYena],\r\n          showResult:   true\r\n        })\r\n      }\r\n      else{\r\n        ctx.drawImage(img, x, y, img.width * scale, img.height * scale);\r\n        this.setState({\r\n          predictions: [\"fail to find\"],\r\n          loading : false,\r\n          fileName: response.data.path,\r\n          hash:     response.data.hash\r\n        })\r\n        this.showBanner({fail : true})\r\n      }\r\n    }\r\n  }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"back\">\r\n        <Banner \r\n          className=\"banner\"\r\n          title=\"응답이 제출되었습니다.\"\r\n          showBanner={this.state.bannerStatus}\r\n        />\r\n        <Banner \r\n          css={{backgroundColor:'red', color:'white'}}\r\n          className=\"banner\"\r\n          title=\"잘못된 파일이거나, 서버가 응답할 수 없습니다.\"\r\n          showBanner={this.state.error}\r\n        />\r\n        <Banner \r\n          css={{backgroundColor:'yellow'}}\r\n          className=\"banner\"\r\n          title=\"얼굴을 찾을 수 없습니다.\"\r\n          showBanner={this.state.fail}\r\n        />\r\n      <div className=\"bodyDiv\">\r\n        <img className=\"preview\" id=\"preview\" />\r\n        <div className=\"upload\">\r\n            <IconButton className=\"iconButton\" onClick={this.clear} size=\"small\">\r\n              <RefreshIcon className=\"refresh\" fontSize=\"large\"/>\r\n            </IconButton>\r\n            <div className=\"upload-files\">\r\n              <header>\r\n              <p>\r\n              <span className=\"up\">조유리즈</span>\r\n              <span className=\"load\">판별기</span>\r\n              </p>\r\n              </header>\r\n            <div className=\"body\" id=\"drop\">         \r\n              {\r\n                !this.state.loading && !this.state.showResult ?(\r\n                  <div className=\"uploadBox\">\r\n                    <Dropzone multiple={false} onDrop={acceptedFiles => this.onDrop(acceptedFiles)}>\r\n                      {({getRootProps, getInputProps}) => (\r\n                        <section className=\"dropSection\">\r\n                          <div className=\"dropBox\" {...getRootProps(this.style)}>\r\n                            <input className=\"dropzone\" {...getInputProps({\r\n                              type:'file',\r\n                              accept:'image/*'\r\n                            })} />\r\n                            <div className=\"dropText\">\r\n                            <p className={this.state.reload ? 'nomalP' : 'fadeP'}>업로드할 파일을 드래그하거나</p> \r\n                            <p className={this.state.reload ? 'nomalP' : 'fadeP'}>박스를 \r\n                            <span style={{color:'lightBlue'}}> 클릭</span>해주세요</p>\r\n                            </div>\r\n                          </div>\r\n                        </section>\r\n                      )}\r\n                    </Dropzone>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"imageBox\">\r\n                    <div className=\"imageTable\">\r\n                    <canvas className=\"imageCanvas\" id=\"imageCanvas\">이 브라우저는 'canvas'기능을 제공하지 않습니다.</canvas>\r\n                    {\r\n                      this.state.showResult ?(\r\n                      <div className=\"resultBox\">\r\n                        <div className=\"resultDiv\">분석 결과 : {this.state.predictions[0]}</div>\r\n                        <div className=\"resultDiv\">\r\n                          <AnimatedModal \r\n                            banner={this.showBanner}\r\n                            clear={this.clear}\r\n                            fileName={this.state.fileName} \r\n                            hash={this.state.hash} \r\n                            prediction={this.state.predictions[0]}/>\r\n                        </div>\r\n                      </div>\r\n                      ) :null\r\n                    }\r\n                    <div className=\"loadingBox\">\r\n                        <PropagateLoader\r\n                          css={override}\r\n                          size={25}\r\n                          color={\"#FF509F\"}\r\n                          loading={this.state.loading}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  )\r\n              }\r\n            </div>\r\n            </div>\r\n        </div>  \r\n\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default App; \r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}